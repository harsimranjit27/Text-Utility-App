{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","id","onClick","toggleRedMode","htmlFor","togglePurpleMode","toggleGreenMode","toggleDarkMode","TextForm","useState","text","setText","vowelCount","match","length","heading","value","onChange","event","target","style","backgroundColor","color","rows","btnColor","newText","showAlert","document","getElementById","select","navigator","clipboard","writeText","split","join","defaultProps","aboutText","App","setMode","setAlert","setBtnColor","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.411d326d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n            props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)} : </strong>{props.alert.msg}\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n          <div className=\"container-fluid\">\r\n            {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n            <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n              <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n              <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                <li className=\"nav-item\">\r\n                  {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                  <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                </li>\r\n                {/* <li className=\"nav-item\">\r\n                  { <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link> }\r\n                  <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\r\n                </li> */}\r\n              </ul>\r\n            </div>\r\n            \r\n            <div className=\"form-check form-switch px-2\">\r\n              <input className=\"form-check-input ms-0\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckChecked\" onClick={props.toggleRedMode}/>\r\n              <label className={`form-check-label me-0 text-${props.mode === \"light\"?\"dark\":\"light\"}`} htmlFor=\"flexSwitchCheckChecked\">\r\n                Red Mode\r\n              </label>\r\n            </div>\r\n            <div className=\"form-check form-switch px-2\">\r\n              <input className=\"form-check-input ms-0\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckChecked\" onClick={props.togglePurpleMode}/>\r\n              <label className={`form-check-label me-0 text-${props.mode === \"light\"?\"dark\":\"light\"}`} htmlFor=\"flexSwitchCheckChecked\">\r\n                Purple Mode\r\n              </label>\r\n            </div>\r\n            <div className=\"form-check form-switch px-2\">\r\n              <input className=\"form-check-input ms-0\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckChecked\" onClick={props.toggleGreenMode}/>\r\n              <label className={`form-check-label me-0 text-${props.mode === \"light\"?\"dark\":\"light\"}`} htmlFor=\"flexSwitchCheckChecked\">\r\n                Green Mode\r\n              </label>\r\n            </div>\r\n            <div className=\"form-check form-switch px-2\">\r\n              <input className=\"form-check-input ms-0\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckChecked\" onClick={props.toggleDarkMode}/>\r\n              <label className={`form-check-label me-0 text-${props.mode === \"light\"?\"dark\":\"light\"}`} htmlFor=\"flexSwitchCheckChecked\">\r\n                Dark Mode\r\n              </label>\r\n            </div>\r\n            \r\n          \r\n        </div>\r\n      </nav>\r\n    );\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"Set title here\",\r\n    aboutText: \"About text here\"\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string\r\n}\r\n","import React , {useState} from 'react'\r\nimport Navbar from './Navbar'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    \r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value);\r\n    }\r\n    const handleUppercaseClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to UPPERCASE!\",\"success\");\r\n    };\r\n    const handleLowercaseClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lowercase!\",\"success\");\r\n    };\r\n    \r\n    const handleClearText = ()=>{\r\n        setText(\"\");\r\n        props.showAlert(\"Text has been cleared!\",\"success\");\r\n    };\r\n    \r\n    const handleCopyText = ()=>{\r\n        let text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to clipboard!\",\"success\");\r\n    };\r\n    \r\n    const removeExtraSpaces = ()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed!\",\"success\");\r\n    };\r\n\r\n    const [text, setText] = useState(\"\");\r\n    \r\n    let vowelCount = 0;\r\n    vowelCount += (text.match(/\\a/g) || []).length;\r\n    vowelCount += (text.match(/\\e/g) || []).length;\r\n    vowelCount += (text.match(/\\i/g) || []).length;\r\n    vowelCount += (text.match(/\\o/g) || []).length;\r\n    vowelCount += (text.match(/\\u/g) || []).length;\r\n    vowelCount += (text.match(/\\A/g) || []).length;\r\n    vowelCount += (text.match(/\\E/g) || []).length;\r\n    vowelCount += (text.match(/\\I/g) || []).length;\r\n    vowelCount += (text.match(/\\O/g) || []).length;\r\n    vowelCount += (text.match(/\\U/g) || []).length;\r\n    \r\n    // text = \"Incorrect way to change state\";\r\n    // setText(\"Correct way to change state\");\r\n\r\n    return (\r\n        <>\r\n        <div className={`container text-${props.mode===\"light\"?\"dark\":\"light\"}`}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea value={text} onChange={handleOnChange} className=\"form-control\" style={{backgroundColor: props.mode===\"dark\"?\"#2d2e2d\":\"white\",\r\n            color: props.mode===\"dark\"?\"white\":\"black\"}} id=\"myBox\" rows=\"8\" ></textarea>\r\n            </div>\r\n            <button className={`btn btn-${props.btnColor} mx-2`} onClick={handleUppercaseClick}>Convert to uppercase</button> \r\n            <button className={`btn btn-${props.btnColor} mx-2`} onClick={handleLowercaseClick}>Convert to lowercase</button> \r\n            <button className={`btn btn-${props.btnColor} mx-2`} onClick={handleClearText}>Clear</button> \r\n            <button className={`btn btn-${props.btnColor} mx-2`} onClick={handleCopyText}>Copy Text</button> \r\n            <button className={`btn btn-${props.btnColor} mx-2`} onClick={removeExtraSpaces}>Remove extra spaces</button> \r\n        </div>\r\n        <div className={`my-1 mx-4 text-${props.mode === \"dark\"? \"light\":\"dark\"}`}>\r\n            <h2>Your text summary</h2>\r\n            <p className=\"my-1\">{text.split(\" \").length-1} words, {text.length} characters</p>\r\n            <p className=\"my-1\">{(text.split(\" \").length-1) * 0.008} Minutes read</p>\r\n            <span>{vowelCount} Vowels</span>\r\n            <span className=\"mx-2\">{text.length - vowelCount} Consonants</span>\r\n            <h2 className=\"my-3\">Preview</h2>\r\n            <p>{text.length>0?text:\"Enter something in textbox above to preview\"}</p>\r\n        </div>\r\n        </>\r\n    );\r\n}\r\n","import { useState } from 'react';\nimport './App.css';\nimport About from './components/About';\nimport Alert from './components/Alert';\nimport Navbar from \"./components/Navbar\";\nimport TextForm from './components/TextForm';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); // whether dark mode is enable or not\n  const [alert, setAlert] = useState(null);\n  const [btnColor, setBtnColor] = useState(\"primary\");\n\n  const toggleDarkMode = ()=>{\n    if(mode === \"light\"){\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#2d2e2d\";\n      showAlert(\"Dark mode has been enabled\",\"success\");\n    }\n    else{\n      setMode(\"light\");\n      setBtnColor(\"primary\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\",\"success\");\n    }  \n  }\n  const toggleRedMode = ()=>{\n    if(mode === \"light\"){\n      setMode(\"dark\");\n      setBtnColor(\"danger\");\n      document.body.style.backgroundColor = \"#570a02\";\n      showAlert(\"Red mode has been enabled\",\"success\");\n    }\n    else{\n      setMode(\"light\");\n      setBtnColor(\"primary\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\",\"success\");\n    }  \n  }\n  const togglePurpleMode = ()=>{\n    if(mode === \"light\"){\n      setMode(\"dark\");\n      setBtnColor(\"light\");\n      document.body.style.backgroundColor = \"#240936\";\n      showAlert(\"Purple mode has been enabled\",\"success\");\n    }\n    else{\n      setMode(\"light\");\n      setBtnColor(\"primary\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\",\"success\");\n    }  \n  }\n  const toggleGreenMode = ()=>{\n    if(mode === \"light\"){\n      setMode(\"dark\");\n      setBtnColor(\"success\");\n      document.body.style.backgroundColor = \"#07240a\";\n      showAlert(\"Green mode has been enabled\",\"success\");\n    }\n    else{\n      setMode(\"light\");\n      setBtnColor(\"primary\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\",\"success\");\n    }  \n  }\n  const showAlert = (message,type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  return (\n    <>\n    {/* <Router> */}\n    <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" mode={mode} toggleGreenMode={toggleGreenMode} togglePurpleMode={togglePurpleMode} toggleRedMode={toggleRedMode} toggleDarkMode={toggleDarkMode}/>\n    <Alert alert={alert}/>\n    <div className=\"container\">\n    {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n          </Route>\n          </Switch>\n        </Router> */}\n          <TextForm heading=\"Enter the text to analyze below\" btnColor={btnColor} mode={mode} showAlert={showAlert}/>\n        </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}